int8 = anything:d -> parseInt8(d)
int16 = <anything{2}>:d -> parseInt16(d)
int32 = <anything{4}>:d -> parseInt32(d)
int64 = <anything{8}>:d -> parseInt64(d)

strlen = <anything{2}>:d -> max([0, parseInt16(d)])
string = strlen:size <anything{size}>:data -> data

bytes = int32:size <anything{size}>:data -> data

int32list = int32:num int32{num}:nums -> nums


receiveResponse =
    (int32:s -> s-4):size
    int32:correlationId
    -> receiver.prepareReceiveMessage(size, correlationId)


receiveUnknown =
    ( -> receiver.messageSize):size
    <anything{size}>:data
    -> receiver.receivedUnknown(data)


# Metadata response

broker =
    int32:nodeId
    string:host
    int32:port
    -> (nodeId, host, port)

brokerList =
    int32:num
    broker{num}:brokers
    -> brokers

partitionMetadata =
    int16:partitionErrorCode
    int32:partitionId
    int32:leader
    int32list:replicas
    int32list:isr
    -> (partitionErrorCode, partitionId, leader, replicas, isr)

partitionMetadataList =
    int32:num
    partitionMetadata{num}:partitions
    -> partitions

topicMetadata =
    int16:topicErrorCode
    string:topicName
    partitionMetadataList:partitionMetadata
    -> (topicErrorCode, topicName, partitionMetadata)


topicMetadataList =
    int32:num
    topicMetadata{num}:topics
    -> topics

metadataResponse =
    brokerList:brokers
    topicMetadataList:topicMetadata
    -> receiver.receivedMetadataResponse(brokers, topicMetadata)


# Produce response

partitionProduceResponse =
    int32:partition
    int16:errorCode
    int64:offset
    -> (partition, errorCode, offset)

partitionProduceResponseList =
    int32:num
    partitionProduceResponse{num}:l
    -> l

produceResponseItem =
    string:topicName
    partitionProduceResponseList:l
    -> (topicName, l)

produceResponse =
    int32:num
    produceResponseItem{num}:responses
    -> receiver.receivedProduceResponse(responses)


# Message set

message =
    <anything{4}>:crc
    int8:magicByte
    int8:attributes
    (('\xff\xff\xff\xff' -> None) | bytes):key  # key is optional: if not present, it has a length = \xff{4} (-1)
    bytes:value
    -> Message(
        crc=crc,
        magicByte=magicByte,
        attributes=attributes,
        key=key,
        value=value
    )

messageSetPart =
    int64:offset
    int32:messageSize
    message:m
    -> (offset, m)

receiveMessageSetPart = messageSetPart:part -> receiver.receiveMessage(*part)

messageSet = messageSetPart*


topicResponseItem =
    int32:partition
    int16:errorCode
    int64:highwaterMarkOffset
    int32:messageSetSize
    <anything{messageSetSize}>:messageSetBytes
    -> (partition, errorCode, highwaterMarkOffset, messageSetBytes)


# Fetch response

fetchResponseItem =
    string:topicName
    int32:num
    topicResponseItem{num}:topicDetails
    -> (topicName, topicDetails)

fetchResponse =
    int32:num
    fetchResponseItem{num}:responses
    -> receiver.receivedFetchResponse(responses)
